接口定义语言 aidl
https://blog.csdn.net/u011240877/article/details/72863432


# ipc
 Inter-Process communication 进程间通信
 
服务于进程间通信
服务于进程间通信

进程间通信（IPC，Inter-Process Communication），指至少两个进程或线程间传送数据或信号的一些技术或方法。进程是计算机系统分配资源的最小单位(严格说来是线程)。每个进程都有自己的一部分独立的系统资源，彼此是隔离的。为了能使不同的进程互相访问资源并进行协调工作，才有了进程间通信。举一个典型的例子，使用进程间通信的两个应用可以被分类为客户端和服务器（见主从式架构），客户端进程请求数据，服务端回复客户端的数据请求。有一些应用本身既是服务器又是客户端，这在分布式计算中，时常可以见到。这些进程可以运行在同一计算机上或网络连接的不同计算机上。


进程间通信技术包括消息传递、同步、共享内存和远程过程调用。IPC是一种标准的Unix通信机制。

在 Linux 系统中，虚拟内存机制为每个进程分配了线性连续的内存空间，操作系统将这种虚拟内存空间映射到物理内存空间，
每个进程有自己的虚拟内存空间，进而不能操作其他进程的内存空间，只有操作系统才有权限操作物理内存空间。 
进程隔离保证了每个进程的内存安全。


就是一种概念吧， 也不是啥规范， 进程间通信的一个统称吧。 

是个主从服务服务设计模式。

我个人认为， 像rpc 和 app和服务器的主从模式， 浏览器和服务器的主从交互， 都是ipc.


# rpc

remote procedure call

远程过程调用啦
RPC 只是一种计算机通信协议。

该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。

在面向对象编程中，它也被叫做 “远程方法调用”。

远程过程调用是一个分布式计算的客户端-服务器（Client/Server）的例子，它简单而又广受欢迎。远程过程调用总是由客户端对服务器发出一个执行若干过程请求，并用客户端提供的参数。执行结果将返回给客户端。由于存在各式各样的变体和细节差异，对应地派生了各式远程过程调用协议，而且它们并不互相兼容。

为了允许不同的客户端均能访问服务器，许多标准化的 RPC 系统应运而生了。其中大部分采用接口描述语言（Interface Description Language，IDL），方便跨平台的远程过程调用。

https://www.cnblogs.com/LBSer/p/4853234.html

有点分布式云计算的感觉
服务组内的调用

多用在后台服务的。 

# idl(interface description language) 接口描述语言



# aidl

android interface definition language

AIDL（Android 接口定义语言）与您可能使用过的其他 IDL 类似。 您可以利用它定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。 在 Android 上，一个进程通常无法访问另一个进程的内存。 尽管如此，进程需要将其对象分解成操作系统能够识别的原语，并将对象编组成跨越边界的对象。 编写执行这一编组操作的代码是一项繁琐的工作，因此 Android 会使用 AIDL 来处理。




# ContentProvider


### android中几种进程间通信进行对比
https://blog.csdn.net/u011240877/article/details/72863432#rpc-%E6%98%AF%E4%BB%80%E4%B9%88


Android 为我们提供了以下几种进程通信机制（供开发者使用的进程通信 API）对应的文章链接如下：

文件
AIDL （基于 Binder） 
Android 进阶：进程通信之 AIDL 的使用
Android 进阶：进程通信之 AIDL 解析
Binder 
Android 进阶：进程通信之 Binder 机制浅析
Messenger （基于 Binder） 
Android 进阶：进程通信之 Messenger 使用与解析
ContentProvider （基于 Binder） 
Android 进阶：进程通信之 ContentProvider 内容提供者
Socket 
Android 进阶：进程通信之 Socket （顺便回顾 TCP UDP）
在上述通信机制的基础上，我们只需集中精力定义和实现 RPC 编程接口即可。









